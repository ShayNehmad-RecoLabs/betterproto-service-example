// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package reco

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SchmooserServiceClient is the client API for SchmooserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchmooserServiceClient interface {
	AddSchmooser(ctx context.Context, in *AddSchmooserRequest, opts ...grpc.CallOption) (*AddSchmooserResponse, error)
	ListSchmoosers(ctx context.Context, in *ListSchmoosersRequest, opts ...grpc.CallOption) (*ListSchmoosersResponse, error)
	GetSchmooser(ctx context.Context, in *GetSchmooserRequest, opts ...grpc.CallOption) (*GetSchmooserResponse, error)
}

type schmooserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchmooserServiceClient(cc grpc.ClientConnInterface) SchmooserServiceClient {
	return &schmooserServiceClient{cc}
}

func (c *schmooserServiceClient) AddSchmooser(ctx context.Context, in *AddSchmooserRequest, opts ...grpc.CallOption) (*AddSchmooserResponse, error) {
	out := new(AddSchmooserResponse)
	err := c.cc.Invoke(ctx, "/example.services.v1.SchmooserService/AddSchmooser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schmooserServiceClient) ListSchmoosers(ctx context.Context, in *ListSchmoosersRequest, opts ...grpc.CallOption) (*ListSchmoosersResponse, error) {
	out := new(ListSchmoosersResponse)
	err := c.cc.Invoke(ctx, "/example.services.v1.SchmooserService/ListSchmoosers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schmooserServiceClient) GetSchmooser(ctx context.Context, in *GetSchmooserRequest, opts ...grpc.CallOption) (*GetSchmooserResponse, error) {
	out := new(GetSchmooserResponse)
	err := c.cc.Invoke(ctx, "/example.services.v1.SchmooserService/GetSchmooser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchmooserServiceServer is the server API for SchmooserService service.
// All implementations must embed UnimplementedSchmooserServiceServer
// for forward compatibility
type SchmooserServiceServer interface {
	AddSchmooser(context.Context, *AddSchmooserRequest) (*AddSchmooserResponse, error)
	ListSchmoosers(context.Context, *ListSchmoosersRequest) (*ListSchmoosersResponse, error)
	GetSchmooser(context.Context, *GetSchmooserRequest) (*GetSchmooserResponse, error)
	mustEmbedUnimplementedSchmooserServiceServer()
}

// UnimplementedSchmooserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchmooserServiceServer struct {
}

func (UnimplementedSchmooserServiceServer) AddSchmooser(context.Context, *AddSchmooserRequest) (*AddSchmooserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSchmooser not implemented")
}
func (UnimplementedSchmooserServiceServer) ListSchmoosers(context.Context, *ListSchmoosersRequest) (*ListSchmoosersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSchmoosers not implemented")
}
func (UnimplementedSchmooserServiceServer) GetSchmooser(context.Context, *GetSchmooserRequest) (*GetSchmooserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchmooser not implemented")
}
func (UnimplementedSchmooserServiceServer) mustEmbedUnimplementedSchmooserServiceServer() {}

// UnsafeSchmooserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchmooserServiceServer will
// result in compilation errors.
type UnsafeSchmooserServiceServer interface {
	mustEmbedUnimplementedSchmooserServiceServer()
}

func RegisterSchmooserServiceServer(s grpc.ServiceRegistrar, srv SchmooserServiceServer) {
	s.RegisterService(&_SchmooserService_serviceDesc, srv)
}

func _SchmooserService_AddSchmooser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSchmooserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchmooserServiceServer).AddSchmooser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.services.v1.SchmooserService/AddSchmooser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchmooserServiceServer).AddSchmooser(ctx, req.(*AddSchmooserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchmooserService_ListSchmoosers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSchmoosersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchmooserServiceServer).ListSchmoosers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.services.v1.SchmooserService/ListSchmoosers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchmooserServiceServer).ListSchmoosers(ctx, req.(*ListSchmoosersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchmooserService_GetSchmooser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchmooserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchmooserServiceServer).GetSchmooser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.services.v1.SchmooserService/GetSchmooser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchmooserServiceServer).GetSchmooser(ctx, req.(*GetSchmooserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SchmooserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.services.v1.SchmooserService",
	HandlerType: (*SchmooserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSchmooser",
			Handler:    _SchmooserService_AddSchmooser_Handler,
		},
		{
			MethodName: "ListSchmoosers",
			Handler:    _SchmooserService_ListSchmoosers_Handler,
		},
		{
			MethodName: "GetSchmooser",
			Handler:    _SchmooserService_GetSchmooser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example/services/v1/different_service.proto",
}
